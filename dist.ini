name    = DateTime-Event-Holiday-US
;version = 0.01

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;BUILD: BEGIN
;BUILD: BeforeBuild
;BUILD: FileGatherer
;[CheckChangesTests] ; need to work on this later
;[ConsistentVersionTest] Test::ConsistentVersions too inflexible
[GatherDir]
[License]
;[GitFmtChanges]
log_format = short
[Test::Compile]
;[DistManifestTests] ; Need to figure out why test is failing.
[EOLTests]
[HasVersionTests]
[Test::Kwalitee]
[MetaTests]
[NoTabsTests]
[PodCoverageTests]
[PodSyntaxTests]
[ProgCriticTests]
[ReportVersions]
[Test::Perl::Critic]
[Test::Synopsis]
[Test::UnusedVars]
[Test::PodSpelling]
wordlist = Pod::Wordlist
spell_cmd = aspell list
stopwords = DateTime
stopwords = RRULE
[MetaJSON]
[MetaYAML]
[Manifest]

;BUILD: FilePruner
[ManifestSkip]
[PruneCruft]
[PruneFiles]
filenames = dist.ini
filenames = weaver.ini

;BUILD: FileMunger
[PerlTidy]
perltidyrc = .perltidyrc
[OurPkgVersion]
[ExtraTests]
;BUILD: FileMunger:ExecFiles
[ExecDir]
;BUILD: FileMunger
[PodWeaver]
;BUILD: FileMunger:VersionProvider
[Git::NextVersion]
;BUILD: FileMunger:MetaProvider
[AutoMetaResources]
bugtracker.github = user:harleypig
repository.github = user:harleypig
[MetaNoIndex]
directory = t
directory = xt
[MetaProvides::Package]
meta_noindex = 1
;BUILD: FileMunger

;BUILD: PrereqSource
[AutoPrereqs]
;BUILD: PrereqSource:ExecFiles
;[ExecDir] is only needed once, but runs here as well.
;BUILD: PrereqSource:ShareDir
;BUILD: PrereqSource

;BUILD: InstallTool
[ReadmeFromPod]
[ReadmeMarkdownFromPod]
;BUILD: InstallTool:ExecFiles
;[ExecDir] is only needed once, but runs here as well.
;BUILD: InstallTool
[ModuleBuild]
;BUILD: InstallTool:ExecFiles
;[ExecDir] is only needed once, but runs here as well.
;BUILD: InstallTool
;[MakeMaker]
[InstallGuide]

;BUILD: AfterBuild
;BUILD: BeforeArchive
;BUILD: END
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;RELEASE: BEGIN
;;RELEASE: Run BUILD above.
;;RELEASE: BeforeRelease
;;[CheckChangesHasContent] Too inflexible
[Git::Check]
allow_dirty = dist.ini
allow_dirty = README.mkdn

[TestRelease]
;RELEASE: TestRunner
; TestRelease calls the TestRunner phase and runs the tests.

;RELEASE: BeforeRelease
[ConfirmRelease]

;RELEASE: Releaser
[UploadToCPAN]
;[FakeRelease]

;RELEASE: AfterRelease
[Git::Tag] ; See docs before getting to this point!
tag_message = %d
[Git::CommitBuild]
branch = build/%b
release_branch = release
message = %h
[Git::Push] ; See docs for pushing release branch as well
push_to = origin
push_to = origin HEAD:refs/head/release
[Twitter]
